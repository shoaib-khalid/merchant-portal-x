import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, ReplaySubject, BehaviorSubject, throwError, of } from 'rxjs';
import { AppConfig } from 'app/config/service.config';
import { ValidateOauthRequest } from './oauth.types';
import { UserService } from 'app/core/user/user.service';
import { switchMap } from 'rxjs/operators';
import { LogService } from 'app/core/logging/log.service';
import { JwtService } from 'app/core/jwt/jwt.service';



@Injectable({
    providedIn: 'root'
})
export class LoginOauthService
{
    private _authenticated: boolean = false;

    constructor(
        private _httpClient: HttpClient,
        private _apiServer: AppConfig,
        private _userService: UserService,
        private _logging: LogService,
        private _jwt: JwtService,





    )
    {
    }

    socialOptions = {
        headers: new HttpHeaders({
          "Content-Type": "application/json"
        }),
        withCredentials : true
      
      };

    OAUTH_API_LOGIN: string = "https://api.symplified.it/user-service/v1/" + "clients/loginoauth";

    get userService$()
    {
        return this._apiServer.settings.apiServer.userService;
    }

    /**
     * Setter & getter for access token
     */
     set accessToken(token: string)
     {
         localStorage.setItem('accessToken', token);
     }
 
     get accessToken(): string
     {
         return localStorage.getItem('accessToken') ?? '';
     }
 
     /**
      * Setter & getter for refresh token
      */
     set refreshToken(token: string)
     {
         localStorage.setItem('refreshToken', token);
     }
 
     get refreshToken(): string
     {
         return localStorage.getItem('refreshToken') ?? '';
     }
 

    loginOauth(authRequest:ValidateOauthRequest):Observable<any> {
        
      // return this._httpClient
      //     .post<any>(this.userService$ +'/clients/loginoauth', authRequest, this.socialOptions);

      return this._httpClient.post<any>(this.userService$ +'/clients/loginoauth', authRequest, this.socialOptions).pipe(
        switchMap(async (response: any) => {

            this._logging.debug("Response from loginOauth",response);

            /**
             * 
             *  JWT
             * 
             */


            // Generate jwt manually since Kalsym User Service does not have JWT
            let jwtPayload = {
                iat: Date.parse(response.data.session.created),
                iss: 'Fuse',
                exp: Date.parse(response.data.session.expiry),
                role: response.data.role,
                act: response.data.session.accessToken,
                uid: response.data.session.ownerId
            }

            this._logging.debug("Generate JWT payload with Fuse", jwtPayload);


            /**
             * 
             *  USER SERVICE
             * 
             */


            var header: any = {
                headers: new HttpHeaders().set("Authorization", `Bearer ${response.data.session.accessToken}`)
            };
            
            // this._genJwt.generate(jwtheader,jwtpayload,secret)
            let token = this._jwt.generate({ alg: "HS256", typ: "JWT"},jwtPayload,response.data.session.accessToken);

            // get user info
            let userData: any = await this._httpClient.get(this.userService$ + "/clients/" + response.data.session.ownerId, header).toPromise();
            
            // Store the user on the user service
            let user = {
                "id": userData.data.id,
                "name": userData.data.name,
                "username": userData.data.username,
                "locked": userData.data.locked,
                "deactivated": userData.data.deactivated,
                "created": userData.data.created,
                "updated": userData.data.updated,
                "roleId": userData.data.roleId,
                "email": userData.data.email,
                "avatar": "assets/images/logo/logo_symplified_bg.png",
                "status": "online",
                "role": userData.data.roleId
            };

            this._userService.client = user;

            this._logging.debug("UserService Object (Generated by Fuse)",user);

            /**
             * 
             *  PROCESS
             * 
             */

            // Store the access token in the local storage
            this.accessToken = token;
            
            // Store the refresh token in the local storage
            this.refreshToken = response.data.session.refreshToken;
            
            // Set the authenticated flag to true
            this._authenticated = true;
            
            // Return a new observable with the response
            let newResponse = {
                "accessToken": this.accessToken,
                "tokenType": "bearer",
                "user": user
            };

            this._logging.debug("JWT Object (Generated by Fuse)",newResponse);
            // return of(response); // original
            return of(newResponse);
        })
      );


          
    }

}
